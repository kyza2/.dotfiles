
# GLX backend is typically much faster but depends on a sane driver.
backend = "xrender";

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
glx-copy-from-front = false;
#
# Enabled client-side shadows on windows.
shadow = false;
shadow-radius = 16;
shadow-offset-x = -16;
shadow-offset-y = -16;
shadow-opacity = 1

inactive-dim-exclude = [
  "class_i = 'rofi'",
  "class_i = 'kitty'",
];

# Set if you want different colour shadows
shadow-red = 0;
shadow-green = 0;
shadow-blue = 0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way picom draws its shadows, certain applications will have visual glitches
shadow-exclude = [
  "! name~=''",
  "name *= 'picom'",
  "name *= 'polybar'",
  "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];

# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;

inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = true;

# i3 trasparent borders and windows
opacity-rule = [
  "0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
  "0:_NET_WM_STATE@[0]:32a *= '_NET_WM_STATE_HIDDEN'",
  "0:_NET_WM_STATE@[1]:32a *= '_NET_WM_STATE_HIDDEN'",
  "0:_NET_WM_STATE@[2]:32a *= '_NET_WM_STATE_HIDDEN'",
  "0:_NET_WM_STATE@[3]:32a *= '_NET_WM_STATE_HIDDEN'",
  "0:_NET_WM_STATE@[4]:32a *= '_NET_WM_STATE_HIDDEN'",
];

corner-radius = 0;

rounded-corners-exclude = [
  # "class_g = 'URxvt'",
  # "class_g = 'XTerm'",
  # "class_g = 'Termite'",
  # "class_g = 'kitty'",
  # "class_g = 'firefox'",
  "class_g = 'Rofi'",
  "class_g = 'Polybar'",
];

blur: {
  method = "dual_kawase";
  strength = 10;
  background = true;
  background-frame = false;
  background-fixed = true;
}

# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
blur-background = true;

# Blur background of opaque windows with transparent frames as well.
blur-background-frame = true;

# Do not let blur radius adjust based on window opacity.
blur-kern = "7x7gaussian";
blur-background-fixed = true;

# Fade windows during opacity changes.
fading = true;

# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 6;

# Opacity change between steps while fading. (default 0.028).
fade-step = 0.001;

# Fade windows in/out when opening/closing
no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ "class_g ~= '^(?!.*(Dunst))'" ];


# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;

# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;

# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;

focus-exclude = [ 
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "name *= 'Brave'",
    "name *= 'Freeplane'",
    "name *= 'Hive'",
    "class_g = 'R_x11'",
    "class_g = 'Firefox'",
    "class_g = 'firefox'",
    "class_g = 'feh'",
    "class_g = 'vlc'",
    "class_g = 'Rofi'",
    "class_g = 'zoom'",
];

# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 0;

# Vertical synchronization: match the refresh rate of the monitor
# vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
#
# Window type settings
#
#################################

wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = false;

        # shadow: Give those windows shadow
        shadow = true;

        # opacity: Default opacity for the type of windows.
        opacity = 0.97;

        # focus: Whether to always consider windows of this type focused.
        focus = false;
    };
};

# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX
# backend for some users.
xrender-sync-fence = true;
